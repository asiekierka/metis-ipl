; SPDX-License-Identifier: CC0-1.0
;
; Auto-generated by hardware-definitions/generate.py on 2025-08-09 10:37
; Cartridge banking I/O ports

; Linear ROM (0x40000 - 0xFFFFF) bank address.
WS_CART_BANK_ROML_PORT equ 0xC0

; RAM (0x10000 - 0x1FFFF) bank address (up to 16 MiB).
WS_CART_BANK_RAM_PORT equ 0xC1

; ROM0 (0x20000 - 0x2FFFF) bank address (up to 16 MiB).
WS_CART_BANK_ROM0_PORT equ 0xC2

; ROM1 (0x30000 - 0x3FFFF) bank address (up to 16 MiB).
WS_CART_BANK_ROM1_PORT equ 0xC3

; Control ROM/Flash access in RAM bank area.
WS_CART_BANK_FLASH_PORT equ 0xCE
WS_CART_BANK_FLASH_ENABLE equ 0x01
WS_CART_BANK_FLASH_DISABLE equ 0x00

; Linear ROM (0x40000 - 0xFFFFF) bank address.
WS_CART_EXTBANK_ROML_PORT equ 0xCF

; RAM (0x10000 - 0x1FFFF) bank address (up to 4 GiB).
WS_CART_EXTBANK_RAM_PORT equ 0xD0

; ROM0 (0x20000 - 0x2FFFF) bank address (up to 4 GiB).
WS_CART_EXTBANK_ROM0_PORT equ 0xD2

; ROM1 (0x30000 - 0x3FFFF) bank address (up to 4 GiB).
WS_CART_EXTBANK_ROM1_PORT equ 0xD4

; Cartridge EEPROM I/O ports

; Cartridge EEPROM data.
WS_CART_EEP_DATA_PORT equ 0xC4

; Cartridge EEPROM command.
WS_CART_EEP_COMMAND_PORT equ 0xC6

WS_CART_EEP_CTRL_PORT equ 0xC8
; Abort cartridge EEPROM transfer.
WS_CART_EEP_CTRL_ABORT equ 0x80
; Send erase command to cartridge EEPROM.
WS_CART_EEP_CTRL_ERASE equ 0x40
; Send write command to cartridge EEPROM.
WS_CART_EEP_CTRL_WRITE equ 0x20
; Send read command to cartridge EEPROM.
WS_CART_EEP_CTRL_READ equ 0x10
; A new cartridge EEPROM command can be written to the I/O ports.
WS_CART_EEP_CTRL_READY equ 0x02
WS_CART_EEP_CTRL_DONE equ 0x01

; Cartridge GPIO I/O ports

WS_CART_GPIO_DIR_PORT equ 0xCC

WS_CART_GPIO_DATA_PORT equ 0xCD

; Karnak mapper I/O ports

WS_CART_KARNAK_TIMER_IRQ_PORT equ 0xD6
WS_CART_KARNAK_TIMER_IRQ_ENABLE equ 0x80

WS_CART_KARNAK_ADPCM_IN_PORT equ 0xD8

WS_CART_KARNAK_ADPCM_OUT_PORT equ 0xD9

; Cartridge RTC I/O ports

WS_CART_RTC_CTRL_PORT equ 0xCA
WS_CART_RTC_CTRL_READ_BIT equ 0x01
WS_CART_RTC_CTRL_READY equ 0x80
WS_CART_RTC_CTRL_ACTIVE equ 0x10
WS_CART_RTC_CTRL_CMD_RESET equ 0x00
WS_CART_RTC_CTRL_CMD_WRITE_STATUS equ 0x02
WS_CART_RTC_CTRL_CMD_READ_STATUS equ 0x03
WS_CART_RTC_CTRL_CMD_WRITE_DATETIME equ 0x04
WS_CART_RTC_CTRL_CMD_READ_DATETIME equ 0x05
WS_CART_RTC_CTRL_CMD_WRITE_TIME equ 0x06
WS_CART_RTC_CTRL_CMD_READ_TIME equ 0x07
WS_CART_RTC_CTRL_CMD_WRITE_ALARM equ 0x08
WS_CART_RTC_CTRL_CMD_SHIFT equ 0
WS_CART_RTC_CTRL_CMD_MASK equ 0x1F

WS_CART_RTC_DATA_PORT equ 0xCB

; Display hardware I/O ports

WS_DISPLAY_CTRL_PORT equ 0x00
; Enable the Screen 1 layer.
WS_DISPLAY_CTRL_SCR1_ENABLE equ 0x01
; Enable the Screen 2 layer.
WS_DISPLAY_CTRL_SCR2_ENABLE equ 0x02
; Enable the sprite layer.
WS_DISPLAY_CTRL_SPR_ENABLE equ 0x04
; Enable the sprite window.
WS_DISPLAY_CTRL_SPR_WIN_ENABLE equ 0x08
; Limit drawing the Screen 2 window to inside its bounds.
WS_DISPLAY_CTRL_SCR2_WIN_INSIDE equ 0x20
; Limit drawing the Screen 2 window to outside its bounds.
WS_DISPLAY_CTRL_SCR2_WIN_OUTSIDE equ 0x30
WS_DISPLAY_CTRL_SCR2_WIN_SHIFT equ 4
WS_DISPLAY_CTRL_SCR2_WIN_MASK equ 0x30
WS_DISPLAY_CTRL_SCR2_WIN_ENABLE_BIT equ 0x20
WS_DISPLAY_CTRL_SCR2_WIN_OUTSIDE_BIT equ 0x10

; The display's background shade/color.
WS_DISPLAY_BACK_PORT equ 0x01

; The current line being drawn by the display.
; 
; Note that final color translation is applied with a one-line delay; for changing LCD shade or color palette values, subtract 1 from this value.
WS_DISPLAY_LINE_PORT equ 0x02

; The line on the start of which the line interurpt should be requested.
WS_DISPLAY_LINE_IRQ_PORT equ 0x03

; Base address of sprite table data.
WS_SPR_BASE_PORT equ 0x04

; First sprite to draw from the sprite table (0 - 127).
WS_SPR_FIRST_PORT equ 0x05

; Number of consecutive sprites to draw from the sprite table (1 - 128).
WS_SPR_COUNT_PORT equ 0x06

; Base address of screen layer data.
WS_SCR_BASE_PORT equ 0x07

; Left-most pixel of the Screen 2 window.
WS_SCR2_WIN_X1_PORT equ 0x08

; Top-most pixel of the Screen 2 window.
WS_SCR2_WIN_Y1_PORT equ 0x09

; Right-most pixel of the Screen 2 window.
WS_SCR2_WIN_X2_PORT equ 0x0A

; Bottom-most pixel of the Screen 2 window.
WS_SCR2_WIN_Y2_PORT equ 0x0B

; Left-most pixel of the sprite window.
WS_SPR_WIN_X1_PORT equ 0x0C

; Top-most pixel of the sprite window.
WS_SPR_WIN_Y1_PORT equ 0x0D

; Right-most pixel of the sprite window.
WS_SPR_WIN_X2_PORT equ 0x0E

; Bottom-most pixel of the sprite window.
WS_SPR_WIN_Y2_PORT equ 0x0F

; X drawing offset of the Screen 1 layer.
WS_SCR1_SCRL_X_PORT equ 0x10

; Y drawing offset of the Screen 1 layer.
WS_SCR1_SCRL_Y_PORT equ 0x11

; X drawing offset of the Screen 2 layer.
WS_SCR2_SCRL_X_PORT equ 0x12

; Y drawing offset of the Screen 2 layer.
WS_SCR2_SCRL_Y_PORT equ 0x13

; Controls LCD driver functionality.
WS_LCD_CTRL_PORT equ 0x14
; Low contrast (drive one line of the LCD at a time with pixel data).
WS_LCD_CTRL_CONTRAST_LOW equ 0x00
; High contrast (drive two lines of the LCD at a time with pixel data).
WS_LCD_CTRL_CONTRAST_HIGH equ 0x02
; Control WSC high contrast mode.
; 
; This mode works by having the LCD drive two lines at a time with data received from the SoC. The first line of the LCD is driven by the first line from the SoC, then additionally by the second line from the SoC.
WS_LCD_CTRL_CONTRAST_SHIFT equ 1
WS_LCD_CTRL_CONTRAST_MASK equ 0x02
; Disable graphics display.
WS_LCD_CTRL_DISPLAY_DISABLE equ 0x00
; Enable graphics display.
WS_LCD_CTRL_DISPLAY_ENABLE equ 0x01
; Control whether or not the LCD is displaying graphics. Does not affect the segment area.
WS_LCD_CTRL_DISPLAY_SHIFT equ 0
WS_LCD_CTRL_DISPLAY_MASK equ 0x01

; Controls the visibility of LCD sidebar icons.
WS_LCD_ICON_PORT equ 0x15
; Sleep segment icon, depicted as a star.
WS_LCD_ICON_SLEEP equ 0x01
; Vertical orientation icon.
WS_LCD_ICON_ORIENT_V equ 0x02
; Horizontal orientation icon.
WS_LCD_ICON_ORIENT_H equ 0x04
; Etc. 1 (small circle) icon.
WS_LCD_ICON_AUX1 equ 0x08
; Etc. 2 (medium circle) icon.
WS_LCD_ICON_AUX2 equ 0x10
; Etc. 3 (large circle) icon.
WS_LCD_ICON_AUX3 equ 0x20

; The final line preceding line counter restart and the beginning of active display. By default, this is set to 158, which equals 159 total lines per frame.
; 
; For safety reasons, this should only be set to even values.
WS_LCD_VTOTAL_PORT equ 0x16

; On STN models (WS/WSC), this controls the start of the vertical back porch. For compatibility, this should always be set to 3 less than LCD_VTOTAL.
WS_LCD_STN_VSYNC_PORT equ 0x17

; The next line to start drawing on. Write-only. Not recommended for use.
WS_LCD_NEXT_LINE_PORT equ 0x18

; Latched (SoC-controlled) icon status/control.
WS_LCD_ICON_LATCH_PORT equ 0x1A
WS_LCD_ICON_LATCH_DISABLE equ 0x01
WS_LCD_ICON_LATCH_HEADPHONE equ 0x02
WS_LCD_ICON_LATCH_VOLUME_B equ 0x04
WS_LCD_ICON_LATCH_VOLUME_A equ 0x08
WS_LCD_ICON_LATCH_VOLUME equ 0x10
WS_LCD_ICON_LATCH_CARTRIDGE equ 0x20

WS_LCD_SHADE_01_PORT equ 0x1C

WS_LCD_SHADE_23_PORT equ 0x1D

WS_LCD_SHADE_45_PORT equ 0x1E

WS_LCD_SHADE_67_PORT equ 0x1F

WS_SCR_PAL_0_PORT equ 0x20
WS_SCR_PAL_1_PORT equ 0x22
WS_SCR_PAL_2_PORT equ 0x24
WS_SCR_PAL_3_PORT equ 0x26
WS_SCR_PAL_4_PORT equ 0x28
WS_SCR_PAL_5_PORT equ 0x2A
WS_SCR_PAL_6_PORT equ 0x2C
WS_SCR_PAL_7_PORT equ 0x2E
WS_SCR_PAL_8_PORT equ 0x30
WS_SCR_PAL_9_PORT equ 0x32
WS_SCR_PAL_10_PORT equ 0x34
WS_SCR_PAL_11_PORT equ 0x36
WS_SCR_PAL_12_PORT equ 0x38
WS_SCR_PAL_13_PORT equ 0x3A
WS_SCR_PAL_14_PORT equ 0x3C
WS_SCR_PAL_15_PORT equ 0x3E

WS_SPR_PAL_0_PORT equ 0x30
WS_SPR_PAL_1_PORT equ 0x32
WS_SPR_PAL_2_PORT equ 0x34
WS_SPR_PAL_3_PORT equ 0x36
WS_SPR_PAL_4_PORT equ 0x38
WS_SPR_PAL_5_PORT equ 0x3A
WS_SPR_PAL_6_PORT equ 0x3C
WS_SPR_PAL_7_PORT equ 0x3E

; DMA I/O ports (color-exclusive)

; Low 16 bits of the linear GDMA source address.
WS_GDMA_SOURCE_L_PORT equ 0x40

; High 4 bits of the linear GDMA source address.
WS_GDMA_SOURCE_H_PORT equ 0x42

; Linear GDMA destination address in IRAM.
WS_GDMA_DEST_PORT equ 0x44

; GDMA length, in bytes; must be a multiple of two.
WS_GDMA_LENGTH_PORT equ 0x46

; Control GDMA functionality.
WS_GDMA_CTRL_PORT equ 0x48
; Start GDMA transfer. This blocks the CPU until the transfer is complete.
WS_GDMA_CTRL_START equ 0x80
WS_GDMA_CTRL_INC equ 0x00
WS_GDMA_CTRL_DEC equ 0x40

; Low 16 bits of the linear sound DMA source address.
WS_SDMA_SOURCE_L_PORT equ 0x4A

; High 4 bits of the linear sound DMA source address.
WS_SDMA_SOURCE_H_PORT equ 0x4C

; Low 16 bits of the sound DMA transfer length.
WS_SDMA_LENGTH_L_PORT equ 0x4E

; High 4 bits of the sound DMA transfer length.
WS_SDMA_LENGTH_H_PORT equ 0x50

WS_SDMA_CTRL_PORT equ 0x52
; Enable sound DMA transfers. This blocks the CPU for a few cycles per sample fetched.
WS_SDMA_CTRL_ENABLE equ 0x80
WS_SDMA_CTRL_INC equ 0x00
WS_SDMA_CTRL_DEC equ 0x40
; Transfer samples to channel 2.
WS_SDMA_CTRL_TARGET_CH2 equ 0x00
; Transfer samples to Hyper Voice.
WS_SDMA_CTRL_TARGET_HYPERV equ 0x10
WS_SDMA_CTRL_TARGET_SHIFT equ 4
WS_SDMA_CTRL_TARGET_MASK equ 0x10
; Stop transferring sample data when the transfer is complete.
WS_SDMA_CTRL_ONESHOT equ 0x00
; Restart transferring sample data from the beginning when the transfer is complete.
WS_SDMA_CTRL_REPEAT equ 0x08
WS_SDMA_CTRL_HOLD equ 0x04
; Sound DMA sample rate: 4000 Hz.
WS_SDMA_CTRL_RATE_4000 equ 0x00
; Sound DMA sample rate: 6000 Hz.
WS_SDMA_CTRL_RATE_6000 equ 0x01
; Sound DMA sample rate: 12000 Hz.
WS_SDMA_CTRL_RATE_12000 equ 0x02
; Sound DMA sample rate: 24000 Hz.
WS_SDMA_CTRL_RATE_24000 equ 0x03
WS_SDMA_CTRL_RATE_SHIFT equ 0
WS_SDMA_CTRL_RATE_MASK equ 0x03

; Internal EEPROM I/O ports

; Internal EEPROM data.
WS_IEEP_DATA_PORT equ 0xBA

; Internal EEPROM command.
WS_IEEP_COMMAND_PORT equ 0xBC

WS_IEEP_CTRL_PORT equ 0xBE
; Protect the internal EEPROM's non-user area (bytes 0x60 onward) from being written to.
WS_IEEP_CTRL_PROTECT equ 0x80
; Send erase command to internal EEPROM.
WS_IEEP_CTRL_ERASE equ 0x40
; Send write command to internal EEPROM.
WS_IEEP_CTRL_WRITE equ 0x20
; Send read command to internal EEPROM.
WS_IEEP_CTRL_READ equ 0x10
; A new internal EEPROM command can be written to the I/O ports.
WS_IEEP_CTRL_READY equ 0x02
; Finished reading out a word from the internal EEPROM.
WS_IEEP_CTRL_DONE equ 0x01

; Hyper Voice I/O ports (color-exclusive)

WS_HYPERV_OUT_L_PORT equ 0x64

WS_HYPERV_OUT_R_PORT equ 0x66

WS_HYPERV_CTRL_PORT equ 0x6A
; Hyper Voice volume: 100% (shift 0 bits to the right).
WS_HYPERV_CTRL_VOLUME_100 equ 0x00
; Hyper Voice volume: 50% (shift 1 bit to the right).
WS_HYPERV_CTRL_VOLUME_50 equ 0x01
; Hyper Voice volume: 25% (shift 2 bits to the right).
WS_HYPERV_CTRL_VOLUME_25 equ 0x02
; Hyper Voice volume: 12.5% (shift 3 bits to the right).
WS_HYPERV_CTRL_VOLUME_12_5 equ 0x03
WS_HYPERV_CTRL_VOLUME_SHIFT equ 0
WS_HYPERV_CTRL_VOLUME_MASK equ 0x03
; For lower volumes, extend the sample with '0' bits.
WS_HYPERV_CTRL_EXT_UNSIGNED equ 0x00
; For lower volumes, extend the sample with '1' bits.
WS_HYPERV_CTRL_EXT_UNSIGNED_NEGATE equ 0x04
; For lower volumes, extend the sign of the sample.
WS_HYPERV_CTRL_EXT_SIGNED equ 0x08
; Disable sign extension; volume is always treated as 100%.
WS_HYPERV_CTRL_EXT_IGNORE equ 0x0C
WS_HYPERV_CTRL_EXT_SHIFT equ 2
WS_HYPERV_CTRL_EXT_MASK equ 0x0C
WS_HYPERV_CTRL_RATE_24000 equ 0x00
WS_HYPERV_CTRL_RATE_12000 equ 0x10
WS_HYPERV_CTRL_RATE_8000 equ 0x20
WS_HYPERV_CTRL_RATE_6000 equ 0x30
WS_HYPERV_CTRL_RATE_4800 equ 0x40
WS_HYPERV_CTRL_RATE_4000 equ 0x50
WS_HYPERV_CTRL_RATE_3000 equ 0x60
WS_HYPERV_CTRL_RATE_2000 equ 0x70
WS_HYPERV_CTRL_RATE_SHIFT equ 4
WS_HYPERV_CTRL_RATE_MASK equ 0x70
; Enable the Hyper Voice channel.
WS_HYPERV_CTRL_ENABLE equ 0x80
WS_HYPERV_CTRL_RESET equ 0x1000
; Hyper Voice target: stereo (left and right channel samples in sequence).
WS_HYPERV_CTRL_TARGET_STEREO equ 0x00
; Hyper Voice target: left channel only.
WS_HYPERV_CTRL_TARGET_LEFT equ 0x2000
; Hyper Voice target: right channel only.
WS_HYPERV_CTRL_TARGET_RIGHT equ 0x4000
; Hyper Voice target: mono (each sample replicated on both channels).
WS_HYPERV_CTRL_TARGET_MONO equ 0x6000
WS_HYPERV_CTRL_TARGET_SHIFT equ 13
WS_HYPERV_CTRL_TARGET_MASK equ 0x6000

; Interrupt control I/O ports

; Currently requested interrupt vector, if any. Bits 3-7 are writable and serve as the vector's offset.
WS_INT_VECTOR_PORT equ 0xB0

WS_INT_ENABLE_PORT equ 0xB2
; UART TX ready.
WS_INT_ENABLE_UART_TX equ 0x01
; Key scan column non-zero.
WS_INT_ENABLE_KEY_SCAN equ 0x02
; Cartridge IRQ pin.
WS_INT_ENABLE_CARTRIDGE equ 0x04
; UART RX ready.
WS_INT_ENABLE_UART_RX equ 0x08
; Display line match.
WS_INT_ENABLE_LINE_MATCH equ 0x10
; Vertical blank timer.
WS_INT_ENABLE_VBL_TIMER equ 0x20
; Vertical blank.
WS_INT_ENABLE_VBLANK equ 0x40
; Horizontal blank timer.
WS_INT_ENABLE_HBL_TIMER equ 0x80

WS_INT_STATUS_PORT equ 0xB4
; UART TX ready.
WS_INT_STATUS_UART_TX equ 0x01
; Key scan column non-zero.
WS_INT_STATUS_KEY_SCAN equ 0x02
; Cartridge IRQ pin.
WS_INT_STATUS_CARTRIDGE equ 0x04
; UART RX ready.
WS_INT_STATUS_UART_RX equ 0x08
; Display line match.
WS_INT_STATUS_LINE_MATCH equ 0x10
; Vertical blank timer.
WS_INT_STATUS_VBL_TIMER equ 0x20
; Vertical blank.
WS_INT_STATUS_VBLANK equ 0x40
; Horizontal blank timer.
WS_INT_STATUS_HBL_TIMER equ 0x80

WS_INT_ACK_PORT equ 0xB6
; UART TX ready.
WS_INT_ACK_UART_TX equ 0x01
; Key scan column non-zero.
WS_INT_ACK_KEY_SCAN equ 0x02
; Cartridge IRQ pin.
WS_INT_ACK_CARTRIDGE equ 0x04
; UART RX ready.
WS_INT_ACK_UART_RX equ 0x08
; Display line match.
WS_INT_ACK_LINE_MATCH equ 0x10
; Vertical blank timer.
WS_INT_ACK_VBL_TIMER equ 0x20
; Vertical blank.
WS_INT_ACK_VBLANK equ 0x40
; Horizontal blank timer.
WS_INT_ACK_HBL_TIMER equ 0x80

; Controls NMI (non-maskable interrupt) functionality.
WS_INT_NMI_CTRL_PORT equ 0xB7
; Trigger a non-maskable interrupt when the battery status is low.
WS_INT_NMI_CTRL_LOW_BATTERY equ 0x10

; Keypad I/O ports

; Controls keypad scanning.
WS_KEY_SCAN_PORT equ 0xB5
WS_KEY_SCAN_ROW_BUTTONS equ 0x40
WS_KEY_SCAN_ROW_X equ 0x20
WS_KEY_SCAN_ROW_Y equ 0x10
WS_KEY_SCAN_B equ 0x08
WS_KEY_SCAN_X4 equ 0x08
WS_KEY_SCAN_Y4 equ 0x08
WS_KEY_SCAN_A equ 0x04
WS_KEY_SCAN_X3 equ 0x04
WS_KEY_SCAN_Y3 equ 0x04
WS_KEY_SCAN_START equ 0x02
WS_KEY_SCAN_X2 equ 0x02
WS_KEY_SCAN_Y2 equ 0x02
WS_KEY_SCAN_X1 equ 0x01
WS_KEY_SCAN_Y1 equ 0x01

; System control I/O ports

WS_SYSTEM_CTRL_COLOR_PORT equ 0x60
; Enable fast (6 MHz) cartridge clock.
WS_SYSTEM_CTRL_COLOR_CART_FAST_CLOCK equ 0x01
; Add 1 cycle of wait time to cartridge SRAM transfers.
WS_SYSTEM_CTRL_COLOR_SRAM_WAIT equ 0x02
; Add 1 cycle of wait time to cartridge I/O transfers.
WS_SYSTEM_CTRL_COLOR_IO_WAIT equ 0x08
; Mono mode (2 bits per pixel, planar).
WS_SYSTEM_CTRL_COLOR_MODE_MONO equ 0x00
; Color mode (2 bits per pixel, planar).
WS_SYSTEM_CTRL_COLOR_MODE_COLOR_2BPP equ 0x80
; Color mode (4 bits per pixel, planar).
WS_SYSTEM_CTRL_COLOR_MODE_COLOR_4BPP equ 0xC0
; Color mode (4 bits per pixel, packed/chunky).
WS_SYSTEM_CTRL_COLOR_MODE_COLOR_4BPP_PACKED equ 0xE0
WS_SYSTEM_CTRL_COLOR_MODE_SHIFT equ 5
WS_SYSTEM_CTRL_COLOR_MODE_MASK equ 0xE0
WS_SYSTEM_CTRL_COLOR_FEAT_COLOR equ 0x80
WS_SYSTEM_CTRL_COLOR_FEAT_4BPP equ 0x40
WS_SYSTEM_CTRL_COLOR_FEAT_PACKED equ 0x20

WS_SYSTEM_CTRL_COLOR2_PORT equ 0x62
; Console is Crystal model.
WS_SYSTEM_CTRL_COLOR2_MODEL_CRYSTAL equ 0x80
; Request system power-off. The CPU must halt before succeeding.
WS_SYSTEM_CTRL_COLOR2_REQUEST_POWER_OFF equ 0x01

WS_SYSTEM_CTRL_PORT equ 0xA0
; Console self-test passed.
WS_SYSTEM_CTRL_SELF_TEST equ 0x80
; Add 1 cycle of wait time to cartridge ROM transfers.
WS_SYSTEM_CTRL_ROM_WAIT equ 0x08
; Use 16-bit bus for cartridge ROM transfers.
WS_SYSTEM_CTRL_ROM_16BIT equ 0x04
; Console is a color model (WSC/SC).
WS_SYSTEM_CTRL_MODEL_COLOR equ 0x02
; IPL is locked.
WS_SYSTEM_CTRL_IPL_LOCK equ 0x01

WS_SYSTEM_TEST_PORT equ 0xA3
; Disable UART clock divider for an effective communication rate of 192000 baud.
WS_SYSTEM_TEST_UART equ 0x08
WS_SYSTEM_TEST_VBL_TIMER equ 0x02
WS_SYSTEM_TEST_HBL_TIMER equ 0x01

; Sound I/O ports

; Sound channel 1 frequency, stored as a divisor. Every `2048 - divisor` cycles, the index of the sample to be fetched from the wavetable is incremented.
; 
; The resulting frequency is calculated as follows: `sample rate = 3072000 Hz / (2048 - divisor)`.
; 
; Note that this refers to the sample rate of each sample in the wavetable, and needs to be scaled accordingly for a given waveform. For example, a 50% duty square wave (16 samples of 0 followed by 16 samples of 15) will have an effective sample rate of `(3072000 / 32) Hz / (2048 - divisor)`, or `96000 Hz / (2048 - divisor)`.
WS_SOUND_FREQ_CH1_PORT equ 0x80

; Sound channel 2 frequency, stored as a divisor. Ignored in voice mode.
WS_SOUND_FREQ_CH2_PORT equ 0x82

; Sound channel 3 frequency, stored as a divisor.
WS_SOUND_FREQ_CH3_PORT equ 0x84

; Sound channel 4 frequency, stored as a divisor.
WS_SOUND_FREQ_CH4_PORT equ 0x86

; Sound channel 1 volume.
WS_SOUND_VOL_CH1_PORT equ 0x88

; Sound channel 2 volume.
WS_SOUND_VOL_CH2_PORT equ 0x89

; Sound channel 2 unsigned PCM sample; used in voice mode.
WS_SOUND_VOICE_SAMPLE_PORT equ 0x89

; Sound channel 3 volume.
WS_SOUND_VOL_CH3_PORT equ 0x8A

; Sound channel 4 volume.
WS_SOUND_VOL_CH4_PORT equ 0x8B

; Signed 8-bit value to be added to or subtracted from the channel 3 frequency port every sweep tick.
WS_SOUND_SWEEP_PORT equ 0x8C

; Number of 375 Hz ticks between frequency sweep changes, minus one.
WS_SOUND_SWEEP_TIME_PORT equ 0x8D

WS_SOUND_NOISE_CTRL_PORT equ 0x8E
WS_SOUND_NOISE_CTRL_TAP_14 equ 0x00
WS_SOUND_NOISE_CTRL_TAP_10 equ 0x01
WS_SOUND_NOISE_CTRL_TAP_13 equ 0x02
WS_SOUND_NOISE_CTRL_TAP_4 equ 0x03
WS_SOUND_NOISE_CTRL_TAP_8 equ 0x04
WS_SOUND_NOISE_CTRL_TAP_6 equ 0x05
WS_SOUND_NOISE_CTRL_TAP_9 equ 0x06
WS_SOUND_NOISE_CTRL_TAP_11 equ 0x07
WS_SOUND_NOISE_CTRL_TAP_SHIFT equ 0
WS_SOUND_NOISE_CTRL_TAP_MASK equ 0x07
WS_SOUND_NOISE_CTRL_LENGTH_32767 equ 0x00
WS_SOUND_NOISE_CTRL_LENGTH_1953 equ 0x01
WS_SOUND_NOISE_CTRL_LENGTH_254 equ 0x02
WS_SOUND_NOISE_CTRL_LENGTH_217 equ 0x03
WS_SOUND_NOISE_CTRL_LENGTH_73 equ 0x04
WS_SOUND_NOISE_CTRL_LENGTH_63 equ 0x05
WS_SOUND_NOISE_CTRL_LENGTH_42 equ 0x06
WS_SOUND_NOISE_CTRL_LENGTH_28 equ 0x07
WS_SOUND_NOISE_CTRL_LENGTH_SHIFT equ 0
WS_SOUND_NOISE_CTRL_LENGTH_MASK equ 0x07
; Reset the LFSR noise generator.
WS_SOUND_NOISE_CTRL_RESET equ 0x08
; Enable the LFSR noise generator.
WS_SOUND_NOISE_CTRL_ENABLE equ 0x10

; Sound wavetable base address.
WS_SOUND_WAVE_BASE_PORT equ 0x8F

; Controls sound channels.
WS_SOUND_CH_CTRL_PORT equ 0x90
; Enable sound channel 1.
WS_SOUND_CH_CTRL_CH1_ENABLE equ 0x01
; Enable sound channel 2.
WS_SOUND_CH_CTRL_CH2_ENABLE equ 0x02
; Enable sound channel 3.
WS_SOUND_CH_CTRL_CH3_ENABLE equ 0x04
; Enable sound channel 4.
WS_SOUND_CH_CTRL_CH4_ENABLE equ 0x08
; Enable sound channel 2 in voice mode. This overrides the channel 2 enable bit.
WS_SOUND_CH_CTRL_CH2_VOICE equ 0x20
; Enable applying a frequency sweep effect on sound channel 3.
WS_SOUND_CH_CTRL_CH3_SWEEP equ 0x40
; Provide samples to sound channel 4 from the LFSR noise generator, as opposed to the wavetable.
WS_SOUND_CH_CTRL_CH4_NOISE equ 0x80

; Controls sound output circuitry.
WS_SOUND_OUT_CTRL_PORT equ 0x91
; Set if a headphone adapter is connected.
WS_SOUND_OUT_CTRL_HEADPHONE_DETECT equ 0x80
; Enable output to the headphone output on the EXT port.
WS_SOUND_OUT_CTRL_HEADPHONE_ENABLE equ 0x08
; Enable output to the internal speaker.
WS_SOUND_OUT_CTRL_SPEAKER_ENABLE equ 0x01
; Internal speaker volume: 800% (shift right by 0 bits).
WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_800 equ 0x00
; Internal speaker volume: 400% (shift right by 1 bit).
WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_400 equ 0x02
; Internal speaker volume: 200% (shift right by 2 bits).
WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_200 equ 0x04
; Internal speaker volume: 100% (shift right by 3 bits).
WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_100 equ 0x06
WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_SHIFT equ 1
WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_MASK equ 0x06

; Current state of the noise channel LFSR.
WS_SOUND_NOISE_LFSR_PORT equ 0x92

WS_SOUND_VOICE_VOL_PORT equ 0x94
; Channel 2 left voice volume: 0%.
WS_SOUND_VOICE_VOL_LEFT_NONE equ 0x00
; Channel 2 left voice volume: 50%.
WS_SOUND_VOICE_VOL_LEFT_HALF equ 0x08
; Channel 2 left voice volume: 100%.
WS_SOUND_VOICE_VOL_LEFT_FULL equ 0x0C
WS_SOUND_VOICE_VOL_LEFT_SHIFT equ 2
WS_SOUND_VOICE_VOL_LEFT_MASK equ 0x0C
; Channel 2 right voice volume: 0%.
WS_SOUND_VOICE_VOL_RIGHT_NONE equ 0x00
; Channel 2 right voice volume: 50%.
WS_SOUND_VOICE_VOL_RIGHT_HALF equ 0x02
; Channel 2 right voice volume: 100%.
WS_SOUND_VOICE_VOL_RIGHT_FULL equ 0x03
WS_SOUND_VOICE_VOL_RIGHT_SHIFT equ 0
WS_SOUND_VOICE_VOL_RIGHT_MASK equ 0x03

; Sound test port.
WS_SOUND_TEST_PORT equ 0x95
WS_SOUND_TEST_HOLD_CH equ 0x01
; Disables the sweep clock divisor, applying the sweep effect at a rate of 3072000 Hz.
WS_SOUND_TEST_FAST_SWEEP equ 0x02

; Sound test port: synthesizer (channel 1-4) right channel output sample in bits 0-9.
WS_SOUND_TEST_CHOUT_R_PORT equ 0x96

; Sound test port: synthesizer (channel 1-4) left channel output sample in bits 0-9.
WS_SOUND_TEST_CHOUT_L_PORT equ 0x98

; Sound test port: synthesizer (channel 1-4) sum of output samples in bits 0-10.
WS_SOUND_TEST_CHOUT_M_PORT equ 0x9A

; Controls the internal speaker volume.
WS_SOUND_SPEAKER_VOL_PORT equ 0x9E

; Timer control I/O ports

WS_TIMER_CTRL_PORT equ 0xA2
; Disable vertical blank timer.
WS_TIMER_CTRL_VBL_DISABLE equ 0x00
; Enable vertical blank timer; trigger once, then stop.
WS_TIMER_CTRL_VBL_ONESHOT equ 0x04
; Enable vertical blank timer; repeat continuously.
WS_TIMER_CTRL_VBL_REPEAT equ 0x0C
WS_TIMER_CTRL_VBL_SHIFT equ 2
WS_TIMER_CTRL_VBL_MASK equ 0x0C
WS_TIMER_CTRL_VBL_REPEAT_BIT equ 0x08
WS_TIMER_CTRL_VBL_ENABLE_BIT equ 0x04
; Disable horizontal blank timer.
WS_TIMER_CTRL_HBL_DISABLE equ 0x00
; Enable horizontal blank timer; trigger once, then stop.
WS_TIMER_CTRL_HBL_ONESHOT equ 0x01
; Enable horizontal blank timer; repeat continuously.
WS_TIMER_CTRL_HBL_REPEAT equ 0x03
WS_TIMER_CTRL_HBL_SHIFT equ 0
WS_TIMER_CTRL_HBL_MASK equ 0x03
WS_TIMER_CTRL_HBL_REPEAT_BIT equ 0x02
WS_TIMER_CTRL_HBL_ENABLE_BIT equ 0x01

; Reload value for horizontal blank timer.
WS_TIMER_HBL_RELOAD_PORT equ 0xA4

; Reload value for vertical blank timer.
WS_TIMER_VBL_RELOAD_PORT equ 0xA6

; Current counter value for horizontal blank timer.
WS_TIMER_HBL_COUNTER_PORT equ 0xA8

; Current counter value for vertical blank timer.
WS_TIMER_VBL_COUNTER_PORT equ 0xAA

; UART I/O ports

WS_UART_DATA_PORT equ 0xB1

WS_UART_CTRL_PORT equ 0xB3
; Enable UART serial in EXT port.
WS_UART_CTRL_ENABLE equ 0x80
; Clock UART port at 9600 baud.
WS_UART_CTRL_BAUD_9600 equ 0x00
; Clock UART port at 38400 baud.
WS_UART_CTRL_BAUD_38400 equ 0x40
WS_UART_CTRL_BAUD_SHIFT equ 6
WS_UART_CTRL_BAUD_MASK equ 0x40
; Reset the RX overrun flag.
WS_UART_CTRL_RX_OVERRUN_RESET equ 0x20
; UART TX ready - the data port can be written with a new byte.
WS_UART_CTRL_TX_READY equ 0x04
; UART RX overrun - a second byte was received before the first byte was read out.
WS_UART_CTRL_RX_OVERRUN equ 0x02
; UART RX ready - the data port can have a new byte read from.
WS_UART_CTRL_RX_READY equ 0x01

